qplot(y = cars_model$residuals, x = cars_model$fitted.values,
ylab = "Residuals", xlab = "Fitted values",
main = "The Do-it-yourself Residuals vs. Fitted plot") +
stat_smooth(method = "loess", span = 0.1, colour = I("red"), se = FALSE)
# Plot model residuals on y axis, fitted values on x axis
# Add red trend curve with better choice of smoothing bandwidth
qplot(y = cars_model$residuals, x = cars_model$fitted.values,
ylab = "Residuals", xlab = "Fitted values",
main = "The Do-it-yourself Residuals vs. Fitted plot") +
stat_smooth(method = "loess", span = 0.1, colour = I("red"), se = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
dim(test) & dim(train)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
dim(test) , dim(train)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
head(test)
head(train)
dim(test)
dim(train)
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
corr(train$x,train$y)
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
cor(train$x,train$y)
dna_lm <- lm(x,y, data = train)
dna_lm <- lm(y~., data = train)
summary(dna_lm)
require(ResourceSelection)
kdepairs(cars)
dna_lm <- lm(y~., data = train)
summary(dna_lm)
require(ResourceSelection)
kdepairs(train)
dna_lm <- lm(y~., data = train)
summary(dna_lm)
par(ask=F)
par(mfrow=c(2,2))
plot(dna_lm)
hist(dna_lm$residuals)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv') train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv') train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv') train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv'
library(ggplot2)
library(dplyr)
test <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/test.csv')
train <- read.csv('https://raw.githubusercontent.com/joewarner89/DATA-605-Computational-Mathematics/main/Assignment/week%2012/train.csv')
# Check for NA and missing values
# is.na return a vector with value TT for missing values.
numberOfNA = length(which(is.na(train)==T))
if(numberOfNA > 0) {
cat('Number of missing values found: ', numberOfNA)
cat('\nRemoving missing values...')
train = train[complete.cases(train), ]
}
cor(train$x,train$y)
require(ResourceSelection)
#summarize the data set
kdepairs(train)
#creating the model
dna_lm <- lm(y~., data = train) summary(dna_lm)
require(ResourceSelection)
#summarize the data set
kdepairs(train)
#creating the model
dna_lm <- lm(y~., data = train)
summary(dna_lm)
setwd("~/CUNY/DATA 605 - Computational Mathematics/Assignment/week 14")
library(dplyr)
library(ggplot2)
data <- read.csv('who.csv', stringsAsFactors = F)
data
head(data)
ggplot(data, aes(x = LifeExp ,y = TotExp))
ggplot(data, aes(x = LifeExp ,y = TotExp)) + geom+point()
ggplot(data, aes(x = LifeExp ,y = TotExp)) + geom_point()
data %>% select(LifeExp,TotExp)
data %>% select(LifeExp,TotExp) %>%  mutate(x_scaled = scale(x),
y_scaled = scale(y))
data %>% select(LifeExp,TotExp) %>%  mutate(x_scaled = scale(LifeExp),
y_scaled = scale(TotExp))
data %>% select(LifeExp,TotExp) %>%
mutate(x_scaled = scale(LifeExp, center = TRUE, scale = TRUE),
y_scaled = scale(TotExp, center = TRUE, scale = TRUE))
data %>% select(LifeExp,TotExp) %>%
mutate(x_scaled = scale(LifeExp, center = TRUE, scale = TRUE),
y_scaled = scale(TotExp, center = TRUE, scale = TRUE)) %>%
ggplot(aes(x = x_scaled ,y = y_scaled)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
ggplot(data, aes(x = LifeExp ,y = TotExp)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
data %>% select(LifeExp,TotExp) %>%
mutate(x_scaled = scale(LifeExp, center = TRUE, scale = TRUE),
y_scaled = scale(TotExp, center = TRUE, scale = TRUE)) %>%
ggplot(aes(x = x_scaled ,y = y_scaled)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
knitr::opts_chunk$set(echo = TRUE)
str(data)
summary(raw_data)
str(data)
summary(data)
str(data)
summary(data)
describe(data)
geom_smooth(method=lm)
geom_point() +
ggplot(aes(x = log10(x_scaled) ,y = log10(y_scaled)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
library(dplyr)
library(ggplot2)
data <- read.csv('who.csv', stringsAsFactors = F)
head(data)
y_scaled = scale(TotExp, center = TRUE, scale = TRUE)) %>%
data %>% select(LifeExp,TotExp) %>%
y_scaled = scale(TotExp, center = TRUE, scale = TRUE)) %>%
data %>% select(LifeExp,TotExp) %>%
mutate(x_scaled = scale(LifeExp, center = TRUE, scale = TRUE),
y_scaled = scale(TotExp, center = TRUE, scale = TRUE)) %>%
ggplot(aes(x = log10(x_scaled) ,y = log10(y_scaled)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
data %>% select(LifeExp,TotExp) %>%
data %>% select(LifeExp,TotExp) %>%
mutate(x_scaled = scale(LifeExp, center = TRUE, scale = TRUE),
y_scaled = scale(TotExp, center = TRUE, scale = TRUE)
data %>% select(LifeExp,TotExp)
head(data)
ggplot(data, aes(x = LifeExp ,y = TotExp)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
data %>% select(LifeExp,TotExp) %>%
data %>% select(LifeExp,TotExp) %>%   mutate(x_scaled = scale(LifeExp, center = TRUE, scale = TRUE),
ggplot(aes(x = log10(x_scaled) ,y = log10(y_scaled)) +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
str(data)
summary(data)
ggplot(data, aes(x = LifeExp ,y = TotExp)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
set.seed(123)
linear_lm  <- lm(LifeExp ~ TotExp)
set.seed(123)
linear_lm  <- lm(LifeExp ~ TotExp, data= data)
summary(linear_lm))
set.seed(123)
linear_lm  <- lm(LifeExp ~ TotExp, data= data)
summary(linear_lm)
pf(2.326, df = 1, df2 = 188, lower.tail = FALSE))
pf(2.326, df = 1, df2 = 188, lower.tail = FALSE)
data <- data %>%
mutate(LifeExpT = LifeExp^4.6,
TotExpT = TotExp^0.06)
head(data)
library(dplyr)
library(ggplot2)
data <- read.csv('who.csv', stringsAsFactors = F)
head(data)
str(data)
summary(data)
LifeExp^4.6
ggplot(data, aes(x = LifeExp^4.6 ,y = TotExp)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
x_e = 4.6
y_e = 0.06
data <- data %>%
mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
head(data)
TotExpT = TotExp^(y_e)
data <- data %>%
library(dplyr)
library(dplyr)
TotExpT = TotExp^(y_e)
data %>% select(LifeExp,TotExp)
x_e = 4.6
y_e = 0.06
data %>% select(LifeExp,TotExp) %>% mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
data  %>% mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
head(df)
x_e = 4.6
y_e = 0.06
df <- data %>%
mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
head(df)
ggplot(df, aes(x = LifeExp ,y = TotExp)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
ggplot(df, aes(x = LifeExpT ,y = TotExpT)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
x_e = 4.6
y_e = 0.06
df <- data %>%
mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
head(df)
ggplot(df, aes(x = LifeExpT ,y = TotExpT)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
x_e = 4.6
y_e = 0.06
df <- data %>%
mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
ggplot(df, aes(x = LifeExpT ,y = TotExpT)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
x_e = 4.6
y_e = 0.06
df <- data %>%
mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
ggplot(df, aes(x = LifeExpT ,y = TotExpT)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
set.seed(123)
linear_lm2 <- lm(LifeExpT ~ TotExpT, data= data)
summary(linear_lm2)
prediction  <- c(1.5, 2.5)
prediction <- as.data.frame(prediction)
colnames(prediction) <- 'TotExpT'
pred <-
cbind(prediction^(1/x_e), as.data.frame((predict(linear_lm2, prediction)^(1/y_e))))
colnames(preds) <- c('x', 'prediction')
preds
colnames(pred) <- c('x', 'prediction')
preds
pred
library(cowplot)
library(car)
library(jtools) # For tabulating and visualizing results from multiple regression models
library(corrplot)
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
)
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
)
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
)
multiple_lm <- lm(LifeExpT ~., data= data)
sumary(multiple_lm)
summary(multiple_lm)
plot(linear_lm2)
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
par(mfrow = c(2, 2), mar = c(2,2,2,2))
multiple_lm <- lm(LifeExpT ~., df= data)
multiple_lm <- lm(LifeExpT ~., data= df)
summary(multiple_lm)
multiple_lm <- lm(LifeExpT ~ PropMD + TotExp + PropMD:TotExp, data= df)
summary(multiple_lm)
multiple_lm <- lm(LifeExp ~ PropMD + TotExp + PropMD:TotExp, data= df)
summary(multiple_lm)
multiple_lm <- lm(LifeExp ~ PropMD + TotExp + PropMD:TotExp, data= data)
summary(multiple_lm)
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
par(mfrow = c(2, 2), mar = c(2,2,2,2))
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
)
par(mfrow = c(2, 2), mar = c(2,2,2,2))
plot(linear_lm2)
)
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
)
par(mfrow = c(2, 2), mar = c(2,2,2,2))
plot(linear_lm2)
set.seed(123)
multiple_lm <- lm(LifeExp ~ PropMD + TotExp + PropMD:TotExp, data= data)
summary(multiple_lm)
prediction  <- c(1.5, 2.5)
prediction <- as.data.frame(prediction)
colnames(prediction) <- 'TotExpT'
pred <-
cbind(prediction^(1/x_e), as.data.frame((predict(linear_lm2, prediction)^(1/y_e))))
colnames(pred) <- c('x', 'prediction_y')
pred
newdata = data.frame(PropMD = 0.03, TotExp = 14)
predict(multiple_lm, newdata = newdata)
prediction1 <- predict(linear_lm2, newdata = data.frame(TotExp = 1.5))^(1/4.6)
prediction2 <- predict(model1, newdata = data.frame(TotExp = 2.5))^(1/4.6)
prediction1 <- predict(linear_lm2, newdata = data.frame(TotExp = 1.5))^(1/4.6)
prediction2 <- predict(linear_lm2, newdata = data.frame(TotExp = 2.5))^(1/4.6)
prediction1 <- predict(linear_lm2, newdata = data.frame(TotExpT = 1.5))^(1/4.6)
prediction2 <- predict(linear_lm2, newdata = data.frame(TotExpT = 2.5))^(1/4.6)
cat(
'Prediction with 1.5: ',
scales::comma(prediction1),
'\nPrediction with 2.5: ',
scales::comma(prediction2),
sep = ''
)
prediction1 <- predict(linear_lm2, newdata = data.frame(TotExpT = 1.5))^(1/4.6)
prediction2 <- predict(linear_lm2, newdata = data.frame(TotExpT = 2.5))^(1/4.6)
cat(
'Prediction with 1.5: ',
scales::comma(prediction1),
'\nPrediction with 2.5: ',
scales::comma(prediction2),
sep = ''
)
set.seed(123)
multiple_lm <- lm(LifeExp ~ PropMD + TotExp + PropMD:TotExp, data= data)
summary(multiple_lm)
par(mfrow = c(2, 2), mar = c(2,2,2,2))
plot(multiple_lm)
newdata = data.frame(PropMD = 0.03, TotExp = 14)
predict(multiple_lm, newdata = newdata)
predict(linear_lm2, newdata = newdata)
predict(linear_lm2, newdata = newdata)
x_e = 4.6
y_e = 0.06
df <- data %>%
mutate(LifeExpT = LifeExp^x_e,
TotExpT = TotExp^y_e)
ggplot(df, aes(x = LifeExpT ,y = TotExpT)) +
geom_point() +
labs(x = "Average Life Expectancy", y = "Total Average Healthcare Expenditure") +
geom_smooth(method=lm)
set.seed(123)
linear_lm2 <- lm(LifeExpT ~ TotExpT, data= data)
summary(linear_lm2)
knitr::opts_chunk$set(echo = TRUE)
data <- mtcars
library(ggplot2)
library(broom)
library(ggfortify)
data <- mtcars
library(ggplot2)
data <- mtcars
library(ggplot2)
library(dyplyr)
data <- mtcars
library(ggplot2)
library(dplyr)
data <- mtcars
library(ggplot2)
library(dplyr)
data$vs <- factor(data$vs)
data$am <- factor(ifelse(data$am == 0, "automatic", "manual"))
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
data <- mtcars
library(ggplot2)
library(dplyr)
data$vs <- factor(data$vs)
data$am <- factor(ifelse(data$am == 0, "automatic", "manual"))
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
library(ggplot2)
library(dplyr)
data$vs <- factor(data$vs)
library(ggplot2)
library(dplyr)
data <- mtcars
library(ggplot2)
library(dplyr)
data$vs <- factor(data$vs)
data$am <- factor(ifelse(data$am == 0, "automatic", "manual"))
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
ggplot(data, aes(am, mpg, fill = am)) +
geom_boxplot() +
labs(x = "", y = "Miles Per Gallon") +
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE)
data <- mtcars
library(ggplot2)
library(dplyr)
data$vs <- factor(data$vs)
data$am <- factor(ifelse(data$am == 0, "automatic", "manual"))
data$gear <- factor(data$gear)
data$carb <- factor(data$carb)
ggplot(data, aes(am, mpg, fill = am)) +
geom_boxplot() +
labs(x = "", y = "Miles Per Gallon") +
theme(legend.position = "none")
t.test(mpg ~ ., data = data)
t.test(mpg ~ , data = data)
t.test(mpg ~ am, data = data)
df = data
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
)
library(cowplot)
library(corrplot)
df = data
ctrd <- cor(df[, sapply(df, is.numeric)])
corrplot(ctrd
, method = 'color' # I also like pie and ellipse
, order = 'hclust' # Orders the variables so that ones that behave similarly are placed next to each other
, addCoef.col = 'black'
, number.cex = .6 # Lower values decrease the size of the numbers in the cells
)
set.seed(123)
model <- lm(mpg ~., data = mtcars)
summary(model)
best_model <- step(initial_model, direction = "both")
best_model <- step(model, direction = "both")
best_model <- step(model, direction = "both")
summary(best_model)
par(mfrow=c(2, 2))
plot(best_model)
